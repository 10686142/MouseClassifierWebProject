{"version":3,"sources":["components/progress/ProgressBar.js","components/MouseClassifier.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","props","useState","offset","setOffset","circleRef","useRef","size","progress","strokeWidth","circleOneStroke","circleTwoStroke","center","radius","circumference","Math","PI","useEffect","current","style","className","width","height","stroke","cx","cy","r","ref","strokeDasharray","strokeDashoffset","x","y","MouseClassifier","notMobileAlert","setTimeout","alert","startDataInterval","interval","setInterval","handleDataTransmission","state","dataPeriod","setState","new_sr_no","sr_no","msInterval","newHostTime","hostTime","newNodeTime","nodeTime","document","getElementById","innerHTML","console","log","newData","currentData","sendDataUpstream","stopAll","clearInterval","resultMovement","stopTrackingSensors","x_acc","y_acc","z_acc","x_gyr","y_gyr","z_gyr","data","isLast","isMessage","webSocket","send","JSON","stringify","startCountDown","timeleft","downloadTimer","timeMessage","this","startMovement","bind","gyrSensor","addEventListener","readGyr","accSensor","readAcc","start","e","target","toFixed","z","stop","removeEventListener","isTracking","listnersAdded","deviceMotionPermission","deviceOrientationPermission","isSendingData","Accelerometer","Gyroscope","frequency","messages","resultAccuracy","resultColor","colorDefault","colorGood","colorMedium","colorBad","setupWebSocket","startTracking","isMobile","domain","is_production","socketPath","WebSocket","onmessage","parse","accuracyPerc","accuracy","movement","onclose","error","DeviceMotionEvent","requestPermission","then","permissionState","catch","DeviceOrientationEvent","message","requestDeviceMotionPermission","requestDeviceOrientationPermission","buttonTitle","id","Button","disabled","variant","onClick","Component","App","Boolean","window","location","hostname","match","component","reactRoot","element","reactComponent","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9770b5bf.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ProgressBar.css';\n\n\n// From tutorial: https://blog.logrocket.com/how-to-build-an-svg-circular-progress-component-using-react-and-react-hooks/\nconst ProgressBar = props => {\n    const [offset, setOffset] = useState(0);\n    const circleRef = useRef(null);\n    const {\n        size,\n        progress,\n        strokeWidth,\n        circleOneStroke,\n        circleTwoStroke,\n    } = props;\n\n    const center = size / 2;\n    const radius = size / 2 - strokeWidth / 2;\n    const circumference = 2 * Math.PI * radius;\n\n    useEffect(() => {\n        const progressOffset = ((100 - progress) / 100) * circumference;\n        setOffset(progressOffset);\n\n        circleRef.current.style = 'transition: stroke-dashoffset 850ms ease-in-out';\n\n    }, [setOffset, progress, circumference, offset]);\n\n    return (\n        <>\n                        <svg\n                className=\"svg\"\n                width={size}\n                height={size}\n            >\n                <circle\n                    className=\"svg-circle-bg\"\n                    stroke={circleOneStroke}\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                />\n                <circle\n                    className=\"svg-circle\"\n                    ref={circleRef}\n                    stroke={circleTwoStroke}\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                    strokeDasharray={circumference}\n                    strokeDashoffset={offset}\n                />\n                <text\n                    x={`${center}`}\n                    y={`${center}`}\n                    className=\"svg-circle-text\">\n                        {progress}%\n                </text>\n            </svg>\n        </>\n    );\n}\n\nProgressBar.propTypes = {\n    size: PropTypes.number.isRequired,\n    progress: PropTypes.number.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    circleOneStroke: PropTypes.string.isRequired,\n    circleTwoStroke: PropTypes.string.isRequired\n}\n\nexport default ProgressBar;\n","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport {\n  Gyroscope,\n  Accelerometer\n} from 'motion-sensors-polyfill/src/motion-sensors.js';\nimport ProgressBar from './progress/ProgressBar';\nimport { isMobile } from \"react-device-detect\";\n\n// Requesting permission: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2\n// Npm motion sensor: https://developer.aliyun.com/mirror/npm/package/motion-sensors-polyfill#how-to-use-the-polyfill\n// Start tracking sensor data: https://mobiforge.com/design-development/the-generic-sensor-api\n// Another article on tracking: https://medium.com/better-programming/track-your-smartphone-in-2d-with-javascript-1ba44603c0df\nclass MouseClassifier extends Component {\n\n    constructor(props) {\n      super(props);\n      // User variable from django if applicable\n      this.state = {\n          isTracking: false,\n          listnersAdded: false,\n          deviceMotionPermission: false,\n          deviceOrientationPermission: false,\n          isSendingData: false,\n          accSensor: new Accelerometer(),\n          gyrSensor: new Gyroscope({ frequency: 15 }),\n          webSocket: {},\n          messages: [],\n          dataPeriod: 50,\n          msInterval: 0,\n          sr_no: 0,\n          hostTime: 156162,\n          nodeTime: 29922.0,\n          currentData:{ x_acc:0, y_acc:0, z_acc:0, x_gyr:0, y_gyr:0, z_gyr:0 },\n          interval: {},\n          resultAccuracy: 0.0,\n          resultMovement: \"\",\n          resultColor:'#d9edfe',\n          colorDefault: '#d9edfe',\n          colorGood: '#4FFF33',\n          colorMedium: '#A2E766',\n          colorBad:'#F06925',\n      };\n    }\n\n    componentDidMount(){\n        this.setupWebSocket();\n        this.startTracking = this.startTracking.bind(this);\n\n        if (!isMobile){ this.notMobileAlert(); }\n    }\n\n    notMobileAlert = () => {\n        setTimeout(function (){\n            alert(\"This web can only be used on mobile, since it needs access to the gyroscope and accelator..\")\n        }, 1000);\n    }\n\n    // https://upmostly.com/tutorials/setinterval-in-react-components-using-hooks\n    startDataInterval = () => {\n        const interval = setInterval(this.handleDataTransmission, this.state.dataPeriod);\n        this.setState({interval: interval});\n    }\n\n    handleDataTransmission = () => {\n        const new_sr_no = this.state.sr_no + 1;\n        const msInterval = this.state.msInterval + this.state.dataPeriod;\n        // 156222 -> 156282\n        const newHostTime = this.state.hostTime + this.state.dataPeriod;\n\n        // 29922.0 -> 29928.0\n        const newNodeTime = this.state.nodeTime + (this.state.dataPeriod/10);\n\n        this.setState({\n            msInterval: msInterval,\n            sr_no: new_sr_no,\n            hostTime: newHostTime,\n            nodeTime: newNodeTime\n        });\n\n        document.getElementById('intervalSeconds').innerHTML = msInterval + 'ms';\n        console.log(msInterval);\n        if (msInterval < 2000){\n            // send socket data\n            var newData = this.state.currentData;\n            newData.sr_no = new_sr_no;\n            newData.msInterval = msInterval;\n            newData.hostTime = newHostTime;\n            newData.nodeTime = newNodeTime;\n\n            this.sendDataUpstream(newData, false);\n        }else{\n            // Stop all handlers, trackers etc.\n            this.stopAll();\n        }\n    }\n\n    stopAll = () => {\n        // Close the interval first\n        clearInterval(this.state.interval);\n\n        // Send closing message\n        this.sendDataUpstream({}, true);\n\n        // Stop tracking and notify use\n        this.setState({resultMovement: \"Waiting for results...\"});\n        this.stopTrackingSensors();\n\n        // Reset Data\n        const cleanData = {x_acc:0, y_acc:0, z_acc:0, x_gyr:0, y_gyr:0, z_gyr:0};\n        this.setState({...this.state, currentData: cleanData});\n        this.setState({ msInterval: 0, sr_no: 0, hostTime: 156162, nodeTime: 29922.0,}); // Needs to be a seperate call\n    }\n\n    setupWebSocket(){\n        const domain = this.props.is_production ? '64.225.74.24/' : 'localhost';\n        var socketPath = `wss://${domain}:8000/`;\n\n        const webSocket = new WebSocket(socketPath);\n\n        this.setState({ webSocket:webSocket });\n\n        // Received downstream websocket message\n        webSocket.onmessage = (e) => {\n            var data = JSON.parse(e.data);\n            console.log(data);\n            const accuracyPerc = +(data.accuracy * 100).toFixed(0);\n            var resultColor = accuracyPerc > 70 ? this.state.colorGood : this.state.colorMedium;\n            if (accuracyPerc < 50) { resultColor = this.state.colorBad; }\n\n            // Display the movement and accuracy and unlock button again\n            this.setState({\n                resultAccuracy: accuracyPerc,\n                resultMovement: data.movement,\n                resultColor: resultColor,\n                isTracking: false\n            })\n        };\n\n        webSocket.onclose = (e) => {\n            console.error('Chat socket closed unexpectedly');\n            console.error(e);\n        };\n    }\n\n    sendDataUpstream = (data, isLast, isMessage = false) => {\n        // this.state.webSocket.onopen = function(e) {\n            this.state.webSocket.send(JSON.stringify({\n                'last_one': isLast,\n                'is_message':isMessage,\n                'data': data\n            }));\n        // }\n    }\n\n   async requestDeviceMotionPermission() {\n      // feature detect\n      if (typeof DeviceMotionEvent.requestPermission === 'function') {\n        await DeviceMotionEvent.requestPermission()\n          .then(permissionState => {\n            if (permissionState === 'granted') {\n                console.log(\"Device Motion granted\");\n                this.setState({deviceMotionPermission: true});\n            }\n          })\n          .catch(console.error);\n      } else {\n        // handle regular non iOS 13+ devices\n        console.log(\"Non ios 13 device\");\n      }\n    }\n\n    async requestDeviceOrientationPermission () {\n        // feature detect\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\n          await DeviceOrientationEvent.requestPermission()\n            .then(permissionState => {\n              if (permissionState === 'granted') {\n                  console.log(\"Device Orientation granted\");\n                  this.setState({deviceOrientationPermission: true});\n              }\n            })\n            .catch(console.error);\n        } else {\n          // handle regular non iOS 13+ devices\n          console.log(\"Non ios 13 device\");\n        }\n      }\n\n\n    async startTracking(){\n        if (!isMobile){\n            this.notMobileAlert();\n        }else{\n            // Clear previous data\n            this.setState({\n                resultAccuracy: 0,\n                resultMovement: \"\",\n                resultColor: this.state.colorDefault,\n                isTracking: true\n            });\n\n\n            this.sendDataUpstream({ message:\"Tracking starts..\" }, false, true);\n            if (!this.state.deviceMotionPermission || !this.state.deviceOrientationPermission){\n                await this.requestDeviceMotionPermission();\n                await this.requestDeviceOrientationPermission();\n            }\n\n            this.startCountDown();\n        }\n    }\n\n    startCountDown = () => {\n        var timeleft = 4;\n        var downloadTimer = setInterval(function(){\n            timeleft--;\n            const timeMessage =  `Tracking starts in: ${timeleft}`;\n            this.setState({resultMovement: timeMessage});\n            if(timeleft <= 0){\n                clearInterval(downloadTimer);\n                this.startMovement();\n                this.startDataInterval();\n            }\n        }.bind(this), 1000);\n    }\n\n    // Button tappped\n    startMovement = () => {\n        this.setState({resultMovement: \"Tracking....\"});\n\n        // The .stop method doesn't work so adding and removing listners\n        // if (!this.state.listnersAdded){\n        this.state.gyrSensor.addEventListener('reading', this.readGyr);\n        this.state.accSensor.addEventListener('reading', this.readAcc);\n\n        // }\n\n        // Start up the sensorts\n        this.state.gyrSensor.start();\n        this.state.accSensor.start();\n\n    };\n\n    readGyr = (e) =>{\n\n        this.setState({...this.state.currentData,\n            x_gyr: +(e.target.x).toFixed(2),\n            y_gyr: +(e.target.y).toFixed(2),\n            z_gyr: +(e.target.z).toFixed(2),\n        });\n        console.log()\n        document.getElementById('statusGyr').innerHTML = `x: ${+(e.target.x).toFixed(2)}, y: ${+(e.target.y).toFixed(2)}, z: ${+(e.target.z).toFixed(2)}`;\n    }\n\n    readAcc = (e) =>{\n        this.setState({...this.state.currentData,\n            x_acc: +(e.target.x).toFixed(2),\n            y_acc: +(e.target.y).toFixed(2),\n            z_acc: +(e.target.z).toFixed(2),\n        });\n\n        document.getElementById('statusAcc').innerHTML = `x: ${+(e.target.x).toFixed(2)}, y: ${+(e.target.y).toFixed(2)}, z: ${+(e.target.z).toFixed(2)}`;\n    }\n\n    stopTrackingSensors = () => {\n        // Doesn't work so removing listners\n        this.state.gyrSensor.stop();\n        this.state.accSensor.stop();\n\n        this.state.gyrSensor.removeEventListener(\"reading\", this.readGyr);\n        this.state.accSensor.removeEventListener(\"reading\", this.readAcc);\n    }\n\n    render() {\n        const buttonTitle = !this.state.isTracking ? \"Start\" : \"Disabled\";\n\n        return (\n            <div className=\"dark-vazkir\">\n                <p id=\"statusGyr\">Gyroscope waiting...</p>\n                <p id=\"statusAcc\">Accelerometer waiting...</p>\n                <p id=\"intervalSeconds\">0ms</p>\n                <div className=\"mb-2 center\">\n                    <ProgressBar\n                      progress={this.state.resultAccuracy}\n                      size={250}\n                      strokeWidth={15}\n                      circleOneStroke={this.state.colorDefault}\n                      circleTwoStroke={this.state.resultColor}\n                    />\n                    <h3>{this.state.resultMovement}</h3>\n                    <br/>\n                    <Button disabled={this.state.isTracking}\n                        variant=\"success\"\n                        size=\"lg\"\n                        style={{ width: '15rem', height:'3.5rem' }}\n                        onClick={!this.state.isTracking ? this.startTracking : this.stopAll}>\n                        {buttonTitle}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nMouseClassifier.propTypes = {\n    is_production: PropTypes.bool.isRequired,\n}\nexport default MouseClassifier;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport MouseClassifier from './components/MouseClassifier'\n\n\n// Button From: https://reactjsexample.com/simple-react-component-for-a-circular-progress-button/\n// State in parent component & explantion 2 editor: https://stackoverflow.com/questions/43001280/accessing-draftjs-output-from-parent\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App dark-vazkir\">\n        <MouseClassifier\n        is_production={this.props.is_production}\n        />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n    is_production: PropTypes.bool.isRequired,\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// import axios from 'axios'\n//\n// /**\n//  * Config global for axios/django\n//  */\n// axios.defaults.xsrfHeaderName = \"X-CSRFToken\"\n// axios.defaults.xsrfCookieName = 'csrftoken'\n// axios.defaults.headers.common = {\n//   \"Content-Type\": \"application/json\"\n// }\n// export default axios\n\n\n/**\n * Maintain a simple map of React components to make it easier\n * for Django to reference individual components\n */\nconst pages = {\n  App,\n}\n\n/**\n * If Django hasn't injected these properties into the HTML\n * template that's loading this script then we're viewing it\n * via the create-react-app liveserver\n */\nwindow.component = window.component || 'App';\nwindow.reactRoot = window.reactRoot || document.getElementById('react');\nwindow.props = window.props || { };\n\n// Check if production for websocket\nconst is_production = ('is_production' in window.props) ? !!window.props.is_production : false;\n\n// To acces the component for inserting new contentState\n// Source 1: https://stackoverflow.com/questions/31612598/call-a-react-component-method-from-outside\n// Source 2: https://stackoverflow.com/questions/24841855/how-to-access-component-methods-from-outside-in-reactjs\n// Source 3: https://reactjs.org/docs/refs-and-the-dom.html#adding-a-ref-to-a-class-component\nwindow.props.ref = (element) => {\n  window.reactComponent = element\n}\n\nReactDOM.render(\n    <App is_production={true} />,\n    document.getElementById('react')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}